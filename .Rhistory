abline(v=x[ind],lty=3)
axis(3,at=x[ind],labels= paste0("x=",x[ind]))
legend(x="bottomright",
legend=c("AF(x)","uniform"),bty = "n",
lty=c(1,2),cex=0.75
)
k=1.5
x=seq(0,1,by=0.001)
y=BF(x,k)
ind= which.max(abs(x-y))
x[ind]
plot(x,y,type="l",ylab="Prob",lty=1)
abline(0,1,lty=2)
abline(v=x[ind],lty=3)
axis(3,at=x[ind],labels= paste0("x=",x[ind]))
legend(x="bottomright",
legend=c("AF(x)","uniform"),bty = "n",
lty=c(1,2),cex=0.75
)
k=1.5
x=seq(0,1,by=0.001)
y=CF(x,k)
ind= which.max(abs(x-y))
x[ind]
plot(x,y,type="l",ylab="Prob",lty=1)
abline(0,1,lty=2)
abline(v=x[ind],lty=3)
axis(3,at=x[ind],labels= paste0("x=",x[ind]))
legend(x="bottomright",
legend=c("AF(x)","uniform"),bty = "n",
lty=c(1,2),cex=0.75
)
k=1.5
x=seq(0,1,by=0.001)
y=BF(x,k)
ind= which.max(abs(x-y))
x[ind]
plot(x,y,type="l",ylab="Prob",lty=1)
abline(0,1,lty=2)
abline(v=x[ind],lty=3)
axis(3,at=x[ind],labels= paste0("x=",x[ind]))
legend(x="bottomright",
legend=c("BF(x)","uniform"),bty = "n",
lty=c(1,2),cex=0.75
)
k=1.5
x=seq(0,1,by=0.001)
y=CF(x,k)
ind= which.max(abs(x-y))
x[ind]
plot(x,y,type="l",ylab="Prob",lty=1)
abline(0,1,lty=2)
abline(v=x[ind],lty=3)
axis(3,at=x[ind],labels= paste0("x=",x[ind]))
legend(x="bottomright",
legend=c("CF(x)","uniform"),bty = "n",
lty=c(1,2),cex=0.75
)
data = c(0.0489,0.069,0.0133,0.0372,0.0188,0.0457,0.0307,0.0428,0.0335,0.0274,0.003,0.0531,0.0335,0.0254,0.024,0.0023,0.0254,0.0263,0.0429,0.0172,0.0365,0.0287,0.02,0.0498)
hist(data)
devtools::load_all(".")
MPlusStat
bj=BJStat(data)
BJPvalue
BJPvalue(bj,length(data))
res = BJPvalue(bj,length(data))
print(res)
cat(res)
data = c(0.0335,0.0254,0.024)
hist(data)
bj=BJStat(data)
res = BJPvalue(bj,length(data))
res
data = c(0.0023,0.0254,0.0263,0.0429,0.0172)
bj=BJStat(data)
res = BJPvalue(bj,length(data))
res
?KS
?ks.test
ks=ks.test(data,"punif")
ks
data = c(0.002,0.755,0.027,0.04,0.017)
bj=BJStat(data)
res = BJPvalue(bj,length(data))
res
ks=ks.test(data,"punif")
ks
path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(path))
source("commonFunction\\func_statistics.r")
mydata=read.csv("data\\Yang_YoungOnsetHypertension_Illumina550_SBAS_rawpv.csv")
path=rstudioapi::getActiveDocumentContext()$path
setwd(dirname(path))
mydata=read.csv("Yang_YoungOnsetHypertension_Illumina550_SBAS_rawpv.csv")
#======================plot===========================
library("ggplot2")
theGene="NAV2"
gene=mydata[mydata$Symbol==theGene,]
gene1=gene
gene1$CLR_N_BMI_pv=-log(gene1$CLR_N_BMI_pv)
critical1=-log(0.05)
critical2=-log(0.05/nrow(gene1))
g1=ggplot(gene1,aes(x=dbSNP_RS_ID,y=CLR_N_BMI_pv))+geom_point()+
theme(axis.text.x = element_text(color="white"),panel.background = element_blank(),
axis.line = element_line(colour = "black"),legend.key.size=unit(0.4,"in"),
axis.title=element_text(size=15),axis.text=element_text(size=12))+
labs(x="SNP",y="-log(P-value)")+
geom_hline(yintercept = critical1,linetype="dashed")+
geom_hline(yintercept = critical2,linetype="twodash")+
scale_y_continuous(limits=c(0,critical2+1),breaks = c(critical1,critical2), labels =c("unadj","adj"))
g1
#ggsave("exampleManhattan.png", g1,width=6.5,height=5.17)
g2=ggplot(gene,aes(x=CLR_N_BMI_pv))+stat_ecdf(color="red")+
geom_line(mapping=aes(x=x,y=y),data=data.frame(x=c(0,1),y=c(0,1)),linetype="dashed")+
labs(x="x",y="Probability")+
theme(panel.grid.major = element_line(colour = "grey80"),panel.background = element_blank(),
axis.line = element_line(colour = "black"),legend.key.size=unit(0.4,"in"),
axis.title=element_text(size=15),axis.text=element_text(size=12))+
coord_cartesian(xlim = c(0, 1))
g2
#ggsave("exampleEcdf.png", g2,width=6.5,height=5.17)
g2
g1
g2
g1
#=========================Compute KS,HC,FHC statistics and p-values============================
theGene="NAV2"
pvalue=mydata[mydata$Symbol==theGene,"CLR_N_BMI_pv"]
#The KS statistic and p-value
p.ks=ks.test(pvalue,"punif")$p.value
p.ks
#BJ statistic
bj=BJStat(data)
#BJ statistic
bj=BJStat(pvalue)
p.bj = BJPvalue(bj,length(pvalue))
p.bj
#p-value for the asym local level test
snpN=length(pvalue)
localLevel=c()
sp=sort(pvalue)
for(i in 1:snpN){
localLevel[i]=pbeta(sp[i],i,snpN+1-i)
}
p=1-exp(-2*log(log(snpN))*log(snpN)*min(localLevel))
p
#p-value for the asym local level test
snpN=length(pvalue)
localLevel=c()
sp=sort(pvalue)
for(i in 1:snpN){
localLevel[i]=pbeta(sp[i],i,snpN+1-i)
}
p=1-exp(-4*log(log(snpN))*log(snpN)*min(localLevel))
p
#p-value for the asym BJ test
snpN=length(pvalue)
localLevel=c()
sp=sort(pvalue)
for(i in 1:snpN){
localLevel[i]=pbeta(sp[i],i,snpN+1-i)
}
p=1-exp(-4*log(log(snpN))*log(snpN)*min(localLevel))
p
p.bj
p
p.ks
devtools::load_all("C:/Users/Jeff/OneDrive/course material/project2/jointTest")
#as a function of alpha
nRep <- 10000
n <- 1000
pi <- 1
alpha_list <- seq(0,1,0.01)
beta <- 1
alpha=0.05
precBits = 1024*16
simRep=100000
#save(mp_critical_list,mm_critical_list,bj_critical_list,file="sim1_critical2")
load("sim1_critical2")
setwd("C:/Users/Jeff/OneDrive/course material/project2/jointTest")
#save(mp_critical_list,mm_critical_list,bj_critical_list,file="sim1_critical2")
load("sim1_critical2")
x <- matrix(
runif(n*nRep),nRep,n)
mp=apply(x,1,MPlusStat)
mm=apply(x,1,MMinusStat)
bj=apply(x,1,BJStat)
result=c()
record <- matrix(0,nRep,6)
for(k in 1:length(alpha_list)){
alpha<- alpha_list[k]
mp_critical <- mp_critical_list[k]
mm_critical <- mm_critical_list[k]
bj_critical <- bj_critical_list[k]
mp_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
mm_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
bj_asym_critical <- -log(1-alpha)/4/log(n)/log(log(n))
record[,1] <- mp < mp_critical
record[,2] <- mm < mm_critical
record[,3] <- bj < bj_critical
record[,4] <- mp < mp_asym_critical
record[,5] <- mm < mm_asym_critical
record[,6] <- bj < bj_asym_critical
result <- rbind(result, colMeans(record))
}
k=seq(0,101,10)
x=seq_along(alpha_list)
plot(alpha_list[k],result[k,1],type="b",xlab=expression(alpha),ylab="Estimated Type I Error",lty = 1, lwd = 1,pch=1)
lines(alpha_list[k],result[k,2],type="b",pch=2)
lines(alpha_list[k],result[k,3],type="b",pch=3)
lines(alpha_list[k],result[k,4],type="b",lty = 2,pch=1)
lines(alpha_list[k],result[k,5],type="b",lty = 2,pch=2)
lines(alpha_list[k],result[k,6],type="b",lty = 2,pch=3)
xlab=n_list
axis(side=1, at=seq_along(xlab), labels = xlab)
legend("bottomright",
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
n_list
alpha_list
x=seq_along(alpha_list)
plot(alpha_list[k],result[k,1],type="b",xlab=expression(alpha),ylab="Estimated Type I Error",lty = 1, lwd = 1,pch=1)
lines(alpha_list[k],result[k,2],type="b",pch=2)
lines(alpha_list[k],result[k,3],type="b",pch=3)
lines(alpha_list[k],result[k,4],type="b",lty = 2,pch=1)
lines(alpha_list[k],result[k,5],type="b",lty = 2,pch=2)
lines(alpha_list[k],result[k,6],type="b",lty = 2,pch=3)
legend("bottomright",
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
legend(x=0.7,y=0.6,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
legend(x=0.9,y=0.6,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
x=seq_along(alpha_list)
plot(alpha_list[k],result[k,1],type="b",xlab=expression(alpha),ylab="Estimated Type I Error",lty = 1, lwd = 1,pch=1)
lines(alpha_list[k],result[k,2],type="b",pch=2)
lines(alpha_list[k],result[k,3],type="b",pch=3)
lines(alpha_list[k],result[k,4],type="b",lty = 2,pch=1)
lines(alpha_list[k],result[k,5],type="b",lty = 2,pch=2)
lines(alpha_list[k],result[k,6],type="b",lty = 2,pch=3)
legend(x=0.9,y=0.6,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
x=seq_along(alpha_list)
plot(alpha_list[k],result[k,1],type="b",xlab=expression(alpha),ylab="Estimated Type I Error",lty = 1, lwd = 1,pch=1)
lines(alpha_list[k],result[k,2],type="b",pch=2)
lines(alpha_list[k],result[k,3],type="b",pch=3)
lines(alpha_list[k],result[k,4],type="b",lty = 2,pch=1)
lines(alpha_list[k],result[k,5],type="b",lty = 2,pch=2)
lines(alpha_list[k],result[k,6],type="b",lty = 2,pch=3)
legend(x=0.8,y=0.6,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
load("sim1")
load(sim1_simulate2)
load("sim1_simulate2")
View(result)
nRep <- 10000
n <- 1000
pi <- 1
alpha_list <- seq(0,1,0.01)
beta <- 1
alpha=0.05
precBits = 1024*16
x=seq_along(alpha_list)
plot(alpha_list[k],result[k,1],type="b",xlab=expression(alpha),ylab="Estimated Type I Error",lty = 1, lwd = 1,pch=1)
lines(alpha_list[k],result[k,2],type="b",pch=2)
lines(alpha_list[k],result[k,3],type="b",pch=3)
k=seq(0,101,10)
x=seq_along(alpha_list)
plot(alpha_list[k],result[k,1],type="b",xlab=expression(alpha),ylab="Estimated Type I Error",lty = 1, lwd = 1,pch=1)
alpha_list
View(result)
load("typeI_critical1")
load("typeI_critical")
load("typeI_critical")
nRep <- 10000
n_list <- c(10,50,100,500,1000,5000,10000)
pi <- 1
alpha <- 1
beta <- 1
alpha=0.05
precBits = 1024*16
library(foreach)
library(doParallel)
cl=makeCluster(8)
registerDoParallel(cl)
BUM <- function(n ,pi ,alpha ,beta = 1){
n1 <- rbinom(1, n, pi)
x <- rep(0, n)
ind <- sample.int(n,n1)
x[ind] <- runif(n1)
x[-ind] <- rbeta(n-n1, alpha,beta)
x
}
mp_critical_list <- critical_list[,1]
mm_critical_list <- critical_list[,2]
bj_critical_list <- critical_list[,3]
result=c()
for(k in seq_along(n_list)){
n<- n_list[k]
message(n)
mp_critical <- mp_critical_list[k]
mm_critical <- mm_critical_list[k]
bj_critical <- bj_critical_list[k]
mp_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
mm_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
bj_asym_critical <- -log(1-alpha)/4/log(n)/log(log(n))
record <- matrix(0,nRep,6)
x <- matrix(
runif(n*nRep),nRep,n)
mp=apply(x,1,MPlusStat)
mm=apply(x,1,MMinusStat)
bj=apply(x,1,BJStat)
record[,1] <- mp < mp_critical
record[,2] <- mm < mm_critical
record[,3] <- bj < bj_critical
record[,4] <- mp < mp_asym_critical
record[,5] <- mm < mm_asym_critical
record[,6] <- bj < bj_asym_critical
result <- rbind(result, colMeans(record))
}
load("sim1_simulate")
result
x=seq_along(n_list)
plot(x,result[,1],type="b",ylim=c(0,0.2),xaxt="n",xlab="Sample Size",ylab="Type I Error",lty = 1, lwd = 1,pch=1)
lines(x,result[,2],type="b",pch=2)
lines(x,result[,3],type="b",pch=3)
library(foreach)
library(doParallel)
cl=makeCluster(8)
registerDoParallel(cl)
BUM <- function(n ,pi ,alpha ,beta = 1){
n1 <- rbinom(1, n, pi)
x <- rep(0, n)
ind <- sample.int(n,n1)
x[ind] <- runif(n1)
x[-ind] <- rbeta(n-n1, alpha,beta)
x
}
nRep <- 10000
n_list <- c(10,50,100,500,1000,5000,10000)
pi <- 1
alpha <- 1
beta <- 1
alpha=0.05
precBits = 1024*16
mp_critical_list <- critical_list[,1]
mm_critical_list <- critical_list[,2]
bj_critical_list <- critical_list[,3]
result=c()
for(k in seq_along(n_list)){
n<- n_list[k]
message(n)
mp_critical <- mp_critical_list[k]
mm_critical <- mm_critical_list[k]
bj_critical <- bj_critical_list[k]
mp_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
mm_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
bj_asym_critical <- -log(1-alpha)/4/log(n)/log(log(n))
record <- matrix(0,nRep,6)
x <- matrix(
runif(n*nRep),nRep,n)
mp=apply(x,1,MPlusStat)
mm=apply(x,1,MMinusStat)
bj=apply(x,1,BJStat)
record[,1] <- mp < mp_critical
record[,2] <- mm < mm_critical
record[,3] <- bj < bj_critical
record[,4] <- mp < mp_asym_critical
record[,5] <- mm < mm_asym_critical
record[,6] <- bj < bj_asym_critical
result <- rbind(result, colMeans(record))
}
load("typeI_critical")
mp_critical_list <- critical_list[,1]
mm_critical_list <- critical_list[,2]
bj_critical_list <- critical_list[,3]
result=c()
for(k in seq_along(n_list)){
n<- n_list[k]
message(n)
mp_critical <- mp_critical_list[k]
mm_critical <- mm_critical_list[k]
bj_critical <- bj_critical_list[k]
mp_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
mm_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
bj_asym_critical <- -log(1-alpha)/4/log(n)/log(log(n))
record <- matrix(0,nRep,6)
x <- matrix(
runif(n*nRep),nRep,n)
mp=apply(x,1,MPlusStat)
mm=apply(x,1,MMinusStat)
bj=apply(x,1,BJStat)
record[,1] <- mp < mp_critical
record[,2] <- mm < mm_critical
record[,3] <- bj < bj_critical
record[,4] <- mp < mp_asym_critical
record[,5] <- mm < mm_asym_critical
record[,6] <- bj < bj_asym_critical
result <- rbind(result, colMeans(record))
}
save(result,file="typeI_simulate")
x=seq_along(n_list)
plot(x,result[,1],type="b",ylim=c(0,0.2),xaxt="n",xlab="Sample Size",ylab="Type I Error",lty = 1, lwd = 1,pch=1)
lines(x,result[,2],type="b",pch=2)
lines(x,result[,3],type="b",pch=3)
lines(x,result[,4],type="b",lty = 2,pch=1)
lines(x,result[,5],type="b",lty = 2,pch=2)
lines(x,result[,6],type="b",lty = 2,pch=3)
xlab=n_list
axis(side=1, at=seq_along(xlab), labels = xlab)
legend(x=6.5,y=0.22,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
x=seq_along(n_list)
plot(x,result[,1],type="b",ylim=c(0,0.2),xaxt="n",xlab="Sample Size",ylab="Type I Error",lty = 1, lwd = 1,pch=1)
lines(x,result[,2],type="b",pch=2)
lines(x,result[,3],type="b",pch=3)
lines(x,result[,4],type="b",lty = 2,pch=1)
lines(x,result[,5],type="b",lty = 2,pch=2)
lines(x,result[,6],type="b",lty = 2,pch=3)
xlab=n_list
axis(side=1, at=seq_along(xlab), labels = xlab)
legend(x=5.5,y=0.22,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
x=seq_along(n_list)
plot(x,result[,1],type="b",ylim=c(0,0.2),xaxt="n",xlab="Sample Size",ylab="Type I Error",lty = 1, lwd = 1,pch=1)
lines(x,result[,2],type="b",pch=2)
lines(x,result[,3],type="b",pch=3)
lines(x,result[,4],type="b",lty = 2,pch=1)
lines(x,result[,5],type="b",lty = 2,pch=2)
lines(x,result[,6],type="b",lty = 2,pch=3)
xlab=n_list
axis(side=1, at=seq_along(xlab), labels = xlab)
legend(x=6,y=0.22,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
#as a function of alpha
nRep <- 10000
n <- 1000
pi <- 1
alpha_list <- seq(0,1,0.01)
beta <- 1
alpha=0.05
precBits = 1024*16
simRep=100000
#save(mp_critical_list,mm_critical_list,bj_critical_list,file="typeI_critical2")
load("typeI_critical2")
x <- matrix(
runif(n*nRep),nRep,n)
mp=apply(x,1,MPlusStat)
mm=apply(x,1,MMinusStat)
bj=apply(x,1,BJStat)
result=c()
record <- matrix(0,nRep,6)
for(k in 1:length(alpha_list)){
alpha<- alpha_list[k]
mp_critical <- mp_critical_list[k]
mm_critical <- mm_critical_list[k]
bj_critical <- bj_critical_list[k]
mp_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
mm_asym_critical <- -log(1-alpha)/2/log(n)/log(log(n))
bj_asym_critical <- -log(1-alpha)/4/log(n)/log(log(n))
record[,1] <- mp < mp_critical
record[,2] <- mm < mm_critical
record[,3] <- bj < bj_critical
record[,4] <- mp < mp_asym_critical
record[,5] <- mm < mm_asym_critical
record[,6] <- bj < bj_asym_critical
result <- rbind(result, colMeans(record))
}
save(result,file="typeI_simulate2")
k=seq(0,101,10)
x=seq_along(alpha_list)
plot(alpha_list[k],result[k,1],type="b",xlab=expression(alpha),ylab="Estimated Type I Error",lty = 1, lwd = 1,pch=1)
lines(alpha_list[k],result[k,2],type="b",pch=2)
lines(alpha_list[k],result[k,3],type="b",pch=3)
lines(alpha_list[k],result[k,4],type="b",lty = 2,pch=1)
lines(alpha_list[k],result[k,5],type="b",lty = 2,pch=2)
lines(alpha_list[k],result[k,6],type="b",lty = 2,pch=3)
legend(x=0.82,y=0.6,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
k=seq(0,101,10)
x=seq_along(alpha_list)
plot(alpha_list[k],result[k,1],type="b",xlab=expression(alpha),ylab="Estimated Type I Error",lty = 1, lwd = 1,pch=1)
lines(alpha_list[k],result[k,2],type="b",pch=2)
lines(alpha_list[k],result[k,3],type="b",pch=3)
lines(alpha_list[k],result[k,4],type="b",lty = 2,pch=1)
lines(alpha_list[k],result[k,5],type="b",lty = 2,pch=2)
lines(alpha_list[k],result[k,6],type="b",lty = 2,pch=3)
legend(x=0.84,y=0.6,
legend=c("exact M","exact M+","exact M-","asym M","asym M+","asym M-"),
lty=c(1,1,1,2,2,2),pch=rep(rep(1:3)),cex = 0.7,bty = "n"
)
Sys.getenv()
Sys.getenv("HOME")
